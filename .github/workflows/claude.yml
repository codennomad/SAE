name: Claude Code Assistant

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, synchronize, reopened]
  issues:
    types: [opened, labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  claude-response:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Generate a token from your custom GitHub App
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      # Setup Rust toolchain for SAE project
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Run Claude Code Action with OAuth token
      - name: Claude Code Assistant
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ steps.app-token.outputs.token }}
          model: claude-sonnet-4
          trigger_phrase: '@claude'
          label_trigger: 'claude'
          max_turns: 10
          timeout_minutes: 25

          # Custom instructions for SAE project
          custom_instructions: |
            You are assisting with the SAE (Secure Anonymous Echo) project,
            a secure and anonymous messaging application written in Rust.

            Key focus areas:
            - Security: E2EE, Ed25519 signatures, Perfect Forward Secrecy
            - Cryptography: X25519, ChaCha20-Poly1305, Double Ratchet
            - Privacy: Tor integration, traffic analysis resistance
            - Code quality: Rust best practices, async/await patterns

            Always prioritize security and privacy in your suggestions.

      # Optional: Run tests after Claude makes changes
      - name: Run tests
        if: success()
        run: cargo test --all-features
        continue-on-error: true

      # Optional: Security audit
      - name: Security audit
        if: success()
        run: |
          cargo install cargo-audit || true
          cargo audit || true
        continue-on-error: true
